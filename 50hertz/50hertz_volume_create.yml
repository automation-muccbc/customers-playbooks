---
- hosts: localhost
  name: 50 hertz poc
  gather_facts: no
  vars:
    vars_path:           /app/dist/persistent/playbooks/vars
  tasks:
    - name: Input values
      debug:
        msg: "{{ vars_ext }}"
    - name: Read token
      ansible.builtin.set_fact:
        vault_token_ro: "{{ (lookup('file', vars_path+'/cbc-api-tokens.json') | from_json)['vault_token'] }}"
      no_log: true

    - name: Read Vault secrets
      ansible.builtin.include_role: 
        name: muccbc.security.get_vault_creds
      vars:
        secret_path: "{{ item }}"
        vault_token: "{{ vault_token_ro }}"
        vault_type: hashicorp
        # become and OS type is the same. User of os type is used for ssh connection. 
        # Ex.: on ubuntu connection user is ububntu, on Centos - centos etc (as per OS standards)
        ssh_ostype: "{{ kvm_tmpl_maps.vm_templates[vars_ext.vm[0].os_template].become }}"
      no_log: true
      loop: # secret paths
        - ontap

    - name: Setting up ONTAP cluster credentials details
      ansible.builtin.set_fact:
        auth: &auth
          hostname:       "{{ vars_ext.input_cluster }}"
          username:       "{{ ontap_cbc_username }}"
          password:       "{{ ontap_cbc_password }}"
          validate_certs: false
          use_rest:       always
      no_log: true
    
    - name: Extract VLAN ID
      set_fact:
        lif_vlan_id: "{{ (vars_ext.vlan_id | regex_search('-([0-9]+)', '\\1'))[0] }}"
    
    - name: Get cluster ports
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        use_python_keys: yes
        gather_subset:
          - net_port_info
        fields:
          - node.name
          - name
        parameters:
          vlan.tag: "{{ lif_vlan_id | int }}"
      register: cls_net_ports
    
    # - debug:
    #     msg: "{{ item.node.name }}"
    #   loop: "{{ cls_net_ports.ontap_info.network_ethernet_ports.records }}"

    - name: Get SVM LIFs
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        use_python_keys: yes
        gather_subset:
          - net_interface_info
        fields:
          - location
        parameters:
          svm.name: "{{ vars_ext.input_svm }}"
          #location.home_port: "{{ cls_net_ports.ontap_info.network_ethernet_ports.records[0].name }}"
          location.home_port: "*-{{ lif_vlan_id }}"
      register: svm_net_int

    - set_fact:
        node_list: "{{ svm_net_int.ontap_info.network_ip_interfaces.records | map(attribute='location.home_node.name') | join(',') }}"
    #- debug: var=node_list
    
    - name: Get all aggregates
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        use_python_keys: yes
        gather_subset:
          - aggregate_info
        fields:
          - name
          - node.name
        parameters:
          node.name: "{{ node_list }}"
      register: aggr_info


    - set_fact:
        aggregate_list: "{{ aggr_info.ontap_info.storage_aggregates.records | map(attribute='name') | list }}"
        vol_proto: 'n'
        vol_svm_idx: "{{ (vars_ext.input_svm | regex_search('^svm_alexeym_sv[0-9]{2,3}[a-z]{3,3}([0-9]{3,4})$', '\\1'))[0] }}"
    
    - set_fact: 
        vol_prefix: "{{ vol_proto }}{{ vol_svm_idx }}"

    # when non-descriptive naming is used
    - name: When non-descriptive naming is used
      when: not vars_ext.input_descr_naming | bool
      block:      
        - name: Get volumes to incement index
          netapp.ontap.na_ontap_rest_info:
            <<: *auth
            use_python_keys: yes
            gather_subset:
              - volume_info
            fields:
              - name
            parameters:
              svm.name: "{{ vars_ext.input_svm }}"
              name: "{{ vol_prefix }}*"
          register: existing_vols
        
       # - debug: var=existing_vols.ontap_info.storage_volumes
        
        - set_fact:
            vol_name: "{{ vol_prefix }}000"
          when: existing_vols.ontap_info.storage_volumes.num_records | int == 0
        
        - name: Set existing volumes list
          ansible.builtin.set_fact:
            existing_volumes_list: "{{ existing_volumes_list | default([]) + existing_vols.ontap_info.storage_volumes.records | map(attribute='name') | list | sort}}"
          no_log: false

        - name: Set new volume name
          ansible.builtin.set_fact:
            vol_name: "{{ existing_volumes_list | increment_names(1) }}"
          when: existing_vols.ontap_info.storage_volumes.num_records | int > 0

            
    # when descriptive naming is used
    - set_fact:
        vol_name: "{{ vol_prefix }}{{ vars_ext.input_postfix_server}}{{ vars_ext.input_postfix_app}}"
        export_policy: 
          name: "{{ vars_ext.input_postfix_server[1:] }}"
          rorule: "any"
          rwrule: "sys"
          superuser: "sys"
          protocol: "nf3"
      when: vars_ext.input_descr_naming | bool
    
    
    - name: "Find best aggregate for volume {{ vol_name }}" 
      get_best_aggregate_selective:
          <<: *auth
          svm_name:                "{{ vars_ext.input_svm }}"
          debug:                   True
          size_mb:                 5000
          weight_volume_count:     0
          weight_used_pct:         0
          weight_provisioned_pct:  0
          weight_available_space:  1
          aggr_names_list:         "{{ aggregate_list }}"
      register: aggr_lookup
    
    # - debug:
    #     msg: "{{ item.location.home_node.name }}"
    #   loop: "{{ svm_net_int.ontap_info.network_ip_interfaces.records }}"   

    - name: Generated names and findings
      debug:
        msg: 
          - "Searched on nodes:     {{ node_list }}"
          - "Searched in aggr list: {{ aggregate_list | join(', ') }}"
          - "Suitable aggregate:    {{ aggr_lookup.aggregate.name }}"
          - "New volume name:       {{ vol_name }}"
          - "Export policy:         {{ export_policy }}"
    
    - name: Checking if volume "{{ vol_name }}" exists
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        use_python_keys: yes
        gather_subset:
          - volume_info
        parameters:
          name: "{{ vol_name }}"
      register: vol_exists_info

    - assert:
        that:
          - vol_exists_info.ontap_info.storage_volumes.num_records == 0
        fail_msg: "Volume {{ vol_name }} already exists. Exiting. Please check the name"
        success_msg: "Volume {{ vol_name }} does not exist - continue for create"

    - name: Create volume
      netapp.ontap.na_ontap_volume:
        <<: *auth
        name:                  "{{ vol_name }}"
        vserver:               "{{ vars_ext.input_svm }}"
        aggregate_name:        "{{ aggr_lookup.aggregate.name }}"
        language:              C.UTF-8
        size:                  5
        state:                 present
        junction_path:         /{{ vol_name }}
        volume_security_style: unix
        snapshot_policy:       default
        space_guarantee:       none
        wait_for_completion:   yes
      when: vars_ext.vol_create | bool
          